---
import Layout from "../layouts/Layout.astro";
import ProjectPageLayout from "../layouts/ProjectPageLayout.astro";
import ImageView from "../components/ImageView";
---

<Layout title="Mantas Imbrasas Portfolio">
	<ProjectPageLayout
		title="ChainWatcher"
		imageLink="/img/chainwatcher/chainwatcher_preview.png"
		techStack={[
			"React",
			"Tailwindcss",
			"Ethers",
			"MongoDB",
			"Express",
			"Socket.io",
		]}
	>
		<p>
			A decentralized web application used to track wallets on Ethereum VM
			based blockchains like Binance Smart Chain, Arbitrum, and Ethereum
			itself.
		</p>
		<p>
			As the sole planner and developer of the project, I identified the
			most important features and prioritized them. I then created a
			minimal working prototype of the application, which was then tested
			and refined until it was ready for production.
		</p>
		<p>
			The application was built using React and Tailwindcss for the
			frontend, MongoDB and Express for the backend. Both frontend and
			backend also use Socket.io for real-time communication, and Ethers
			for interacting with Ethereum-based blockchains.
		</p>
		<h1 class="text-3xl font-semibold text-slate-900 text-center">
			Technical architecture
		</h1>
		<h1 class="text-2xl font-semibold text-slate-900 text-center">
			Backend
		</h1>
		<p>
			The backend is written in Express, and uses MongoDB as the database
			for storing the wallets, users, notifications and errors. The
			backend also uses Socket.io for real-time communication between the
			frontend and the backend.
		</p>
		<h2 class="text-xl font-semibold text-slate-900">External APIs</h2>
		<p>
			To track wallets and get all the relevant information, the backend
			uses external APIs:
		</p>
		<ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
			<li>
				Various RPC endpoints for each supported blockchain. RPC (Remote
				Procedure Call) url endpoints allow the backend (and frontend)
				to interact with the blockchains without having to run a node on
				the blockchain.
			</li>
			<li>
				Blockchain Scanner providers, such as Etherscan, to enrich the
				transaction data.
			</li>
		</ul>
		<h1 class="text-2xl font-semibold text-slate-900 text-center">
			Frontend
		</h1>
		<p>
			The frontend state is mainly managed using the React Context API.
			There are two contexts, one for the API context, which handles
			blockchain and backend connections, and one for the app state
			context, which handles the frontend state that needs to be accessed
			by multiple components all over the application. The rest of the
			application components use useState hooks for state storage.
		</p>
		<h2 class="text-xl font-semibold text-slate-800">API Context</h2>
		<p>The API context holds functions and state that are used for:</p>
		<ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
			<li>GET/POST/PUT/DELETE requests to the backend.</li>
			<li>Handling socket connections.</li>
			<li>Handling blockchain connections.</li>
		</ul>
		<h2 class="text-xl font-semibold text-slate-800">App State Context</h2>
		<p>
			The app state context holds the state of the application, and
			functions that are used for:
		</p>
		<ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
			<li>Handling toast state.</li>
			<li>
				Handling UI state like:
				<ul
					class="pl-4 text-slate-700 list-inside"
					style="list-style-type: circle"
				>
					<li>Dark mode.</li>
					<li>Sidebar and Navbar state.</li>
					<li>Notifications popup state.</li>
					<li>Global customizeable color state.</li>
					<li>
						Screen size state to be accessed easily by components.
					</li>
				</ul>
			</li>
		</ul>
	</ProjectPageLayout>
</Layout>
