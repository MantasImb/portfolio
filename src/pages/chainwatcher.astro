---
import Layout from "../layouts/Layout.astro";
import ProjectPageLayout from "../layouts/ProjectPageLayout.astro";
---

<Layout title="Mantas Imbrasas Portfolio">
  <ProjectPageLayout
    title="ChainWatcher"
    imageLink="/img/chainwatcher/chainwatcher_preview.png"
    techStack={[
      "React",
      "Tailwindcss",
      "Ethers",
      "MongoDB",
      "Express",
      "Socket.io",
    ]}
  >
    <p class="text-xl font-semibold text-slate-900 text-center">
      Decentralized, real-time wallet tracker for Ethereum-VM chains
    </p>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">Overview</h2>
    <p>
      ChainWatcher lets you monitor any Ethereum-compatible wallet—Ethereum,
      Binance Smart Chain, Arbitrum, and more—in one clean dashboard.
    </p>
    <p>
      The user can add the addresses they care about, and get instant browser
      notifications as soon as on-chain events happen.
    </p>
    <p>
      Dark mode, custom accent colors, responsive layout—everything adapts to
      your tastes and screen size.
    </p>

    <h2>My Role</h2>
    <ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
      <li>Sole planner, architect, and developer</li>
      <li>Drafted feature list and prioritized the MVP</li>
      <li>Built a clickable prototype for user feedback</li>
      <li>Iterated on performance, reliability, and UX</li>
      <li>Rolled the app out to production and monitored real traffic</li>
    </ul>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">
      Tech Stack
    </h2>
    <ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
      <li>
        <strong>Frontend:</strong> React, Tailwind CSS, React Context API (API &
        UI contexts), Socket.io client, Ethers.js
      </li>
      <li>
        <strong>Backend:</strong> Node.js, Express, MongoDB (Mongoose), Socket.io
        server
      </li>
      <li>
        <strong>Blockchain data:</strong> public RPC endpoints (Infura, Alchemy,
        BSC RPC), Etherscan-style APIs for metadata and internal transactions
      </li>
    </ul>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">
      How It Works
    </h2>
    <ol class="list-decimal list-inside text-slate-700 marker:text-slate-900">
      <li>User registers and adds wallet addresses.</li>
      <li>
        Backend polls or subscribes via WebSocket to each chain’s RPC endpoint,
        enriching raw TX data via a scanner API.
      </li>
      <li>
        New events are stored in MongoDB (users, wallets, notifications, error
        logs) and pushed to connected clients via Socket.io.
      </li>
      <li>
        On the frontend, <strong>APIContext</strong> manages REST calls, sockets,
        and blockchain connections. <strong>AppStateContext</strong>
        handles UI preferences—dark mode, sidebar toggles, toast messages, custom
        colors, and screen-size flags. Components use local
        <code>useState</code> hooks for internal state.
      </li>
    </ol>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">
      Key Features
    </h2>
    <ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
      <li>
        Real-time transaction alerts (incoming, outgoing, token transfers,
        contract events)
      </li>
      <li>Multi-chain support—track wallets across any Ethereum-VM network</li>
      <li>Custom filters by value, token type, or contract address</li>
      <li>Fully themeable UI with dark/light modes and accent-color picker</li>
      <li>
        Resilient error handling and auto-reconnect for RPC and socket failures
      </li>
    </ul>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">
      Challenges &amp; Solutions
    </h2>
    <ul class="list-disc list-inside text-slate-700 marker:text-slate-900">
      <li>
        <strong>Polling vs. subscriptions:</strong> Use WebSocket subscriptions when
        available; fallback to light polling (every 10 s).
      </li>
      <li>
        <strong>State sprawl:</strong> Split concerns into API and UI contexts to
        keep components focused.
      </li>
      <li>
        <strong>Event flooding:</strong> Batch DB writes and debounce socket pushes
        to prevent user spam during high-traffic periods.
      </li>
    </ul>

    <h2 class="text-2xl font-semibold text-slate-900 text-center">
      Outcome &amp; Learnings
    </h2>
    <p>
      ChainWatcher is now a stable, production-ready dApp used by early adopters
      to monitor dozens of wallets in real time.
    </p>
    <p>
      I deepened my expertise in Ethereum tooling (Ethers.js, RPC/WebSocket
      patterns), real-time communication (Socket.io), and clean state management
      with React Context. The modular architecture makes adding new chains
      straightforward.
    </p>
  </ProjectPageLayout>
</Layout>
